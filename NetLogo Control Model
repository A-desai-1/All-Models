extensions [csv]

globals [cart-kill-count immune-efficacy cart-efficacy lra-efficacy trial-number total-healthy total-latent total-active total-reactivated total-new-active total-new-latent total-infected]

breed [healthy-cells healthy-cell]
breed [active-hiv-cells active-hiv-cell]
breed [latent-hiv-cells latent-hiv-cell]
breed [reactivated-hiv-cells reactivated-hiv-cell]
breed [newly-infected-active-cells newly-infected-active-cell]
breed [newly-infected-latent-cells newly-infected-latent-cell]
breed [dead-cells dead-cell]
breed [lra-molecules lra-molecule]
breed [reactivated-new-active-cells reactivated-new-active-cell]
breed [reactivated-new-latent-cells reactivated-new-latent-cell]
breed [natural-new-active-cells natural-new-active-cell]
breed [natural-new-latent-cells natural-new-latent-cell]

turtles-own [treated0 treated1 infection-level activation-threshold reactivated]

to setup
clear-all
set cart-kill-count 0
set trial-number 0
set total-healthy 0
set total-latent 0
set total-active 0
set total-reactivated 0
set total-new-active 0
set total-new-latent 0
set total-infected 0
ask turtles [
set treated0 false
set treated1 false
]
reset-ticks
end

to run-trials
file-open (word user-directory "/Control.csv")
file-print "Trial,Healthy,Latent,Active,Reactivated,New Active,New Latent,Total Infected"
no-display
repeat 2 [
set trial-number trial-number + 1
setup-trial
while [ticks < 50] [ go ]
record-results
if trial-number mod 50 = 0 [ file-flush ]
]
compute-averages
file-close
display
end

to setup-trial
set cart-kill-count 0
set trial-number 0
set total-healthy 0
set total-latent 0
set total-active 0
set total-reactivated 0
set total-new-active 0
set total-new-latent 0
set total-infected 0
ask turtles [
set treated0 false
set treated1 false
]
clear-turtles
create-turtles 4750 [
set breed healthy-cells
set color green
set size 1.5
setxy random-xcor random-ycor
set treated0 false
set treated1 false
]
create-turtles 100 [
set breed latent-hiv-cells
set color blue
set size 1.5
set infection-level 0.5
set activation-threshold 0.5
set reactivated false
set treated0 false
set treated1 false
setxy random-xcor random-ycor
]
create-turtles 400 [
set breed active-hiv-cells
set color red
set size 1.5
set infection-level 1
set reactivated false
set treated0 false
set treated1 false
setxy random-xcor random-ycor
]
create-turtles 300 [
set breed lra-molecules
set color yellow
set size 0.7
setxy random-xcor random-ycor
]
set immune-efficacy 0.0032
set cart-efficacy 0.045
set lra-efficacy 0.0021
reset-ticks
end

to go
ask turtles [
set treated0 false
set treated1 false
]
ask lra-molecules [
let target one-of turtles with [breed != lra-molecules and breed != active-hiv-cells] in-radius 1
if random-float 1 < lra-efficacy and breed != healthy-cells and target != nobody [
ask target [
   set breed reactivated-hiv-cells
 ]
]
]
ask reactivated-hiv-cells [
let num-to-infect min (list (5) count healthy-cells in-radius 2)

if num-to-infect > 0 [
ask n-of num-to-infect healthy-cells in-radius 2 [
if random-float 1 < 0.04 [
  set breed reactivated-new-latent-cells
  set color cyan
]
if random-float 1 >= 0.04 [
  set breed reactivated-new-active-cells
  set color orange
]
]
]
die
]
ask active-hiv-cells [
let num-to-infect min (list (5) count healthy-cells in-radius 2)

if num-to-infect > 0 [
ask n-of num-to-infect healthy-cells in-radius 2 [
if random-float 1 < 0.04 [
  set breed natural-new-latent-cells
  set color cyan
]
if random-float 1 >= 0.04 [
  set breed natural-new-active-cells
  set color orange
]
]
]
die
]
ask natural-new-active-cells [
ask active-hiv-cells [
let num-to-infect min (list (5) count healthy-cells in-radius 2)

if num-to-infect > 0 [
ask n-of num-to-infect healthy-cells in-radius 2 [
if random-float 1 < 0.04 [
  set breed newly-infected-latent-cells
  set color cyan
]
if random-float 1 >= 0.04 [
  set breed newly-infected-active-cells
  set color orange
]
]
]
die
]
]

ask reactivated-new-active-cells [
ask active-hiv-cells [
let num-to-infect min (list (5 + random 2) count healthy-cells in-radius 2)

if num-to-infect > 0 [
ask n-of num-to-infect healthy-cells in-radius 2 [
if random-float 1 < 0.04 [
  set breed newly-infected-latent-cells
  set color cyan
]
if random-float 1 >= 0.04 [
  set breed newly-infected-active-cells
  set color orange
]
]
]
die
]
]
ask active-hiv-cells with [treated0 = false] [
if random-float 1 < cart-efficacy [
set cart-kill-count cart-kill-count + 1
set treated0 true
set breed healthy-cells
set color green
]
]
ask reactivated-new-active-cells with [treated0 = false] [
if random-float 1 < cart-efficacy [
set cart-kill-count cart-kill-count + 1
set treated0 true
set breed healthy-cells
set color green
]
]
ask natural-new-active-cells with [treated0 = false] [
if random-float 1 < cart-efficacy [
set cart-kill-count cart-kill-count + 1
set treated0 true
set breed healthy-cells
set color green
]
]
ask reactivated-hiv-cells with [treated0 = false] [
if random-float 1 < cart-efficacy [
set cart-kill-count cart-kill-count + 1
set treated0 true
set breed healthy-cells
set color green
]
]
  ask reactivated-new-active-cells with [treated0 = false] [
if random-float 1 < cart-efficacy [
set cart-kill-count cart-kill-count + 1
set treated0 true
set breed healthy-cells
set color green
]
]
ask reactivated-new-latent-cells with [treated0 = false] [
if random-float 1 < cart-efficacy [
set cart-kill-count cart-kill-count + 1
set treated0 true
set breed healthy-cells
set color green
]
]
ask reactivated-new-active-cells with [treated1 = false]  [
if random-float 1 < immune-efficacy [
die
set treated1 true
]
]
ask natural-new-active-cells with [treated1 = false]  [
if random-float 1 < immune-efficacy [
die
set treated1 true
]
]
ask active-hiv-cells with [treated1 = false]  [
if random-float 1 < immune-efficacy [
die
set treated1 true
]
]
tick
end

to record-results
let healthy-count count healthy-cells
let latent-count count latent-hiv-cells + count newly-infected-latent-cells + count natural-new-latent-cells + count reactivated-new-latent-cells
let active-count count active-hiv-cells + count newly-infected-active-cells + count natural-new-active-cells + count reactivated-new-active-cells + count reactivated-hiv-cells
let reactivated-count count reactivated-hiv-cells
let new-active count newly-infected-active-cells
let new-latent count newly-infected-latent-cells
let infected-count new-active + new-latent

set total-healthy healthy-count
set total-latent  latent-count
set total-active active-count
set total-reactivated total-reactivated + reactivated-count
set total-new-active total-new-active + new-active
set total-new-latent total-new-latent + new-latent
set total-infected total-infected + infected-count

let row (word trial-number "," total-healthy "," total-latent "," total-active "," reactivated-count "," new-active "," new-latent "," infected-count "," cart-kill-count)
file-print row
end

to compute-averages
let avg-healthy total-healthy / 100
let avg-latent total-latent / 100
let avg-active total-active / 100
let avg-reactivated total-reactivated / 100
let avg-new-active total-new-active / 100
let avg-new-latent total-new-latent / 100
let avg-infected total-infected / 100

show (word "Average Healthy Cells: " avg-healthy)
show (word "Average Latent HIV Cells: " avg-latent)
show (word "Average Active HIV Cells: " avg-active)
show (word "Average Reactivated HIV Cells: " avg-reactivated)
show (word "Average New Active Cells: " avg-new-active)
show (word "Average New Latent Cells: " avg-new-latent)
show (word "Average Total Infected: " avg-infected)

let avg-row (word "Averages," avg-healthy "," avg-latent "," avg-active "," avg-reactivated "," avg-new-active "," avg-new-latent "," avg-infected)
file-print avg-row
end
